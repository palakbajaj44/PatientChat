{"version":3,"sources":["socket.js","App.js","reportWebVitals.js","index.js"],"names":["Socket","io","autoConnect","App","lastmessageref","useRef","useState","list","setList","name","index","isSet","Activeuser","setActiveuser","au","setau","username","setUsername","users","setUsers","useEffect","soc","on","er","console","log","data","length","prevState","k","slice","forEach","dat","push","message","online","onClick","activeusersetter","bind","className","i","key","from","time","Date","toLocaleTimeString","split","y","p","mes","ti","ismine","propState","current","scrollIntoView","smooth","meslist","map","last","ref","onSubmit","e","preventDefault","target","value","emit","type","id","placeholder","required","auth","connect","htmlFor","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.edd5feb2.chunk.js","sourcesContent":["import { io } from 'socket.io-client';\n  const Socket= io('https://yesting.herokuapp.com/',{\n      autoConnect:false\n  });\nexport default Socket;\n","import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport soc from './socket';\n\nconst App=()=>{\n  const lastmessageref=useRef();\n  const [list,setList]=useState([]);\n  const [Activeuser,setActiveuser]=useState({name:\"\",index:-1,isSet:false});\n  const [au,setau]=useState(\"\");\n  const [username,setUsername]=useState({name:\"\",isSet:false});\n\n  const [users,setUsers]=useState([]);\n  useEffect(()=>{\n    soc.on(\"connect_error\",(er)=>{\n      console.log(\"err:\",er);\n      setUsername({name:\"\",isSet:false});\n    });\n    soc.on('users',(data)=>{\n      if(data.length==0){\n      }else{\n        setUsers((prevState)=>{\n          let k=prevState.slice();\n          data.forEach(dat => {\n            k.push({name:dat.name,message:[],online:dat.online})\n          });\n          console.log(k);\n          return k;\n        });\n        setList(prevState=>{\n          let k=prevState.slice();\n              data.forEach(dat => {\n                  k.push(<div key={dat.name} onClick={activeusersetter.bind(this,dat.name)} className={dat.online?\"username--active\":\"username\"}>{dat.name}</div>);\n              });\n          return k;\n      })\n      }\n    });\n\n    soc.on('new-user',dat=>{\n      setUsers((prevState)=>{\n        let k;\n        console.log(\"prevstate:\",prevState);\n        if(!prevState){\n          // console.log(\"PrevStatE:\",prevState);\n          k=[]\n        }\n        else{k=prevState.slice();}\n        k.push({name:dat.name,message:[],online:dat.online});\n        return k;\n      });\n      setList(prevState=>{\n        let k=prevState.slice();\n            k.push(<div key={dat.name} onClick={activeusersetter.bind(this,dat.name)} className={dat.online?\"username--active className = \":\"username\"}>{dat.name}</div>);\n        return k;\n    });\n    });\n\n    //for online /offline\n    soc.on('offline',(dat)=>{\n      setList(prevState=>{\n        let k=prevState.slice();\n        for(let i=0;i<k.length;i++){\n          if(k[i].key==dat){\n            k[i]=(<div key={dat} onClick={activeusersetter.bind(this,dat)} className=\"username\">{dat}</div>)\n            console.log(k[i]);\n          }\n        }\n        return k;\n      })\n    })\n\n    //for online\n    soc.on('online',(dat)=>{\n      setList(prevState=>{\n        let k=prevState.slice();\n        for(let i=0;i<k.length;i++){\n          if(k[i].key==dat){\n            k[i]=(<div key={dat} onClick={activeusersetter.bind(this,dat)} className=\"username--active\">{dat}</div>)\n            console.log(k[i]);\n          }\n        }\n        return k;\n      })\n    })\n\n    //recevice user message.\n    soc.on('private-message',(dat,from)=>{\n      let day = new Date();\n\n      let time = day;\n          time = time.toLocaleTimeString().split(\":\");\n          // let d1 = time[2].split(\" \")[1];\n          time = time[0] + \":\" + time[1];\n      setUsers(prevState=>{\n        let k=prevState.slice();\n        let i;\n        for(let y=0;y<k.length;y++){\n          if(from==k[y].name){\n            i=y;\n          }\n        }\n        let p=k[i].message;\n        p.push({mes:dat,ti:time,ismine:false});\n        k[i].message=p;\n        return k;\n      });\n    });\n\n\n  }\n  ,[]);\n  useEffect(()=>{\n    if(au!=\"\"){\n      setActiveuser(propState=>{\n        let k={...propState};\n        \n        if(users){\n        k.name=au;\n        k.isSet=true;\n        for(let i=0;i<users.length;i++){\n          if(au==users[i].name){\n            k.index=i;\n            break;\n          }\n        }}\n        return k;\n      })\n    }\n  },[au]);\n  useEffect(()=>{\n    if(lastmessageref.current){\n      lastmessageref.current.scrollIntoView({smooth:true});\n    }\n  },[lastmessageref.current]);\n//  make connecntion with server.\n  const userNameDone=(e)=>{\n    console.log(\"[userNameDone]: Called\");\n    e.preventDefault(); \n    setUsername({name:username.name,isSet:true});\n    soc.auth = {'username': username.name };\n    soc.connect();\n  }\n  //taking user input on for username\n\n  const userNameSetter=(e)=>{\n    setUsername({name:e.target.value,isSet:false});\n  }\n\n  //active user setter .\n  const activeusersetter=(dat)=>{\n    console.log(\"[Activeusersetter]\",dat);\n    setau(dat);  \n  }\n  const mesSend=(e)=>{\n    e.preventDefault();\n    let mes=e.target.mes.value;\n    console.log(mes);\n    let day = new Date();\n    let time = day;\n        time = time.toLocaleTimeString().split(\":\");\n        // let d1 = time[2].split(\" \")[1];\n        time = time[0] + \":\" + time[1];\n    soc.emit('private-message',mes,Activeuser.name);\n    setUsers(prevState=>{\n      let k=prevState.slice();\n      let p=k[Activeuser.index].message.slice();\n      p.push({mes:mes,ti:time,ismine:true});\n      k[Activeuser.index].message=p;\n      return k;\n    })\n  }\n\n  if(!username.isSet){\n    return (\n      <div className=\"Username--main\">\n        {/* <div  className=\"Username--heading\">\n        <h1>Login to enter Chat Room</h1>\n        </div> */}\n        <form className=\"container\" onSubmit={userNameDone}>\n          <div className=\"col-75\">\n          <label htmlFor=\"em\" >Username :</label>\n          </div>\n          <div className=\"col-25\">\n          <input className=\"text--area\" placeholder=\"Enter your Email address\" type=\"email\" id=\"em\" onChange={userNameSetter} name=\"mes\" required />\n          </div>\n          <button className=\"sub\">Submit</button>\n        </form>\n      </div>\n    );\n  }\n  let meslist;\n  if(Activeuser.isSet&&users){\n     meslist=users[Activeuser.index].message.map((dat,index)=>{\n      let last= (index==(users[Activeuser.index].message.length-1))\n      return(\n        <div ref={last?lastmessageref:null} className={dat.ismine?\"Message--main\": \"Message--oth\"}>\n                  <div className=\"Message--main--content\">\n                      {dat.mes}</div>\n                  <div className=\"Message--main--time\">{dat.ti}</div>\n            </div>\n      )\n    })\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        Welcome To The Chat Room!!\n      </div>\n      <div className=\"Main--box\">\n        <div className=\"Main--box--users\">\n          <div className=\"Active-agents\">Active Doctors</div>\n          {list}\n        </div>\n        <div className={Activeuser.isSet?\"Main--box--chat\":\"Main--box--chat1\"}>\n          <div className=\"title\">\n            Messages {Activeuser.isSet?Activeuser.name:null}\n          </div>\n          <div className=\"Main--box--chat--messagearea\">\n          {Activeuser.isSet?meslist:\n          <div  className=\"Message--main \">\n            <div className=\"Message--main--content\">\n                      Select an Active Doctor to begin the conversation </div>\n                  <div className=\"Message--main--time\">12:00 am</div>\n            </div>}\n\n             {/* <div  className=\"Message--main Message--oth\">\n                   <div className=\"Message--main--content\">\n                       Talking</div>\n                   <div className=\"Message--main--time\">12:00 pm</div>\n            </div> */}\n          </div>\n          {Activeuser.isSet? \n          <div className=\"c\">\n          <form className=\"cb--bind\" onSubmit={mesSend}>\n                          <input className=\"type\" type=\"text\" id=\"mes\" name=\"mes\" placeholder=\"Type Message...\" required/>\n                          <button className=\"enter\">Send</button>\n          </form>\n          </div>\n          :null}\n          \n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}